/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { Router } from "stencil-router-v2";
export { Router } from "stencil-router-v2";
export namespace Components {
    interface AppContact {
        "router": Router;
    }
    interface AppGuideline {
    }
    interface AppHeader {
    }
    interface AppRoot {
    }
    interface PageComplete {
    }
    interface PageHome {
        "router": Router;
    }
}
export interface AppContactCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAppContactElement;
}
export interface AppGuidelineCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAppGuidelineElement;
}
declare global {
    interface HTMLAppContactElementEventMap {
        "recordConversion": void;
    }
    interface HTMLAppContactElement extends Components.AppContact, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAppContactElementEventMap>(type: K, listener: (this: HTMLAppContactElement, ev: AppContactCustomEvent<HTMLAppContactElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAppContactElementEventMap>(type: K, listener: (this: HTMLAppContactElement, ev: AppContactCustomEvent<HTMLAppContactElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAppContactElement: {
        prototype: HTMLAppContactElement;
        new (): HTMLAppContactElement;
    };
    interface HTMLAppGuidelineElementEventMap {
        "recordConversion": void;
    }
    interface HTMLAppGuidelineElement extends Components.AppGuideline, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAppGuidelineElementEventMap>(type: K, listener: (this: HTMLAppGuidelineElement, ev: AppGuidelineCustomEvent<HTMLAppGuidelineElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAppGuidelineElementEventMap>(type: K, listener: (this: HTMLAppGuidelineElement, ev: AppGuidelineCustomEvent<HTMLAppGuidelineElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAppGuidelineElement: {
        prototype: HTMLAppGuidelineElement;
        new (): HTMLAppGuidelineElement;
    };
    interface HTMLAppHeaderElement extends Components.AppHeader, HTMLStencilElement {
    }
    var HTMLAppHeaderElement: {
        prototype: HTMLAppHeaderElement;
        new (): HTMLAppHeaderElement;
    };
    interface HTMLAppRootElement extends Components.AppRoot, HTMLStencilElement {
    }
    var HTMLAppRootElement: {
        prototype: HTMLAppRootElement;
        new (): HTMLAppRootElement;
    };
    interface HTMLPageCompleteElement extends Components.PageComplete, HTMLStencilElement {
    }
    var HTMLPageCompleteElement: {
        prototype: HTMLPageCompleteElement;
        new (): HTMLPageCompleteElement;
    };
    interface HTMLPageHomeElement extends Components.PageHome, HTMLStencilElement {
    }
    var HTMLPageHomeElement: {
        prototype: HTMLPageHomeElement;
        new (): HTMLPageHomeElement;
    };
    interface HTMLElementTagNameMap {
        "app-contact": HTMLAppContactElement;
        "app-guideline": HTMLAppGuidelineElement;
        "app-header": HTMLAppHeaderElement;
        "app-root": HTMLAppRootElement;
        "page-complete": HTMLPageCompleteElement;
        "page-home": HTMLPageHomeElement;
    }
}
declare namespace LocalJSX {
    interface AppContact {
        "onRecordConversion"?: (event: AppContactCustomEvent<void>) => void;
        "router"?: Router;
    }
    interface AppGuideline {
        "onRecordConversion"?: (event: AppGuidelineCustomEvent<void>) => void;
    }
    interface AppHeader {
    }
    interface AppRoot {
    }
    interface PageComplete {
    }
    interface PageHome {
        "router"?: Router;
    }
    interface IntrinsicElements {
        "app-contact": AppContact;
        "app-guideline": AppGuideline;
        "app-header": AppHeader;
        "app-root": AppRoot;
        "page-complete": PageComplete;
        "page-home": PageHome;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "app-contact": LocalJSX.AppContact & JSXBase.HTMLAttributes<HTMLAppContactElement>;
            "app-guideline": LocalJSX.AppGuideline & JSXBase.HTMLAttributes<HTMLAppGuidelineElement>;
            "app-header": LocalJSX.AppHeader & JSXBase.HTMLAttributes<HTMLAppHeaderElement>;
            "app-root": LocalJSX.AppRoot & JSXBase.HTMLAttributes<HTMLAppRootElement>;
            "page-complete": LocalJSX.PageComplete & JSXBase.HTMLAttributes<HTMLPageCompleteElement>;
            "page-home": LocalJSX.PageHome & JSXBase.HTMLAttributes<HTMLPageHomeElement>;
        }
    }
}
